package basic;

//연산자(operator) : 계산을 목적으로 제공되는 기호 또는 키워드
// => 피연산자 : 연산자에 의해 계산 되어지는 값
// => 피연산자의 갯수에 따라 단항 연산자(1개), 이항 연산자(2개), 삼항 연산자(3개)로 구분

//연산자의 처리 순서에 의해 분류
public class OperatorApp {
	public static void main(String[] args) {
		//최우선 연산자 : 무조건 가장 먼저 명령이 실행되도록 처리하는 연산자
		// => () : 우선 처리 연산자, [] : 배열 연산자, . : 객체 연산자
		System.out.println("10 + 20 * 3 = "+(10+20*3));
		System.out.println("(10 + 20) * 3 = "+((10+20)*3));
		System.out.println("==============================================================");
		//단항 연산자 : 피연산자의 갯수가 1개인 연산자
		// => + : 양수화 연산자 - 피연산자에 +1를 곱한 결과값을 제공하는 연산자
		// => - : 음수화 연산자(2의 보수 연산자) - 피연산자에 -1를 곱한 결과값을 제공하는 연산자
		// => ~ : Bit Not 연산자(1의 보수 연산자) - 피연산자(정수값)의 Bit 단위로 표현된 값을
		//반대로 변환하여 제공하는 연산자
		// => ! : Not 연산자 - 피연산자(논리값)를 반대로 변환하여 제공하는 연산자
		// => ++ : 1 증가 연산자 - 피연산자를 반드시 변수로 사용하며 변수값을 1 증가하여 저장하는 연산자
		// => -- : 1 감소 연산자 - 피연산자를 반드시 변수로 사용하며 변수값을 1 감소하여 저장하는 연산자
		// => (자료형) : 강제 형변환 연산자 - 피연산자의 자료형을 일시적으로 변환하여 제공하는 연산자
		// => new : 객체 생성 연산자 - 클래스의 생성자를 호출하여 객체를 생성하여 제공하는 연산자
		int a1=10;
		System.out.println("a1 = "+a1);
		System.out.println("-a1 = "+(-a1));
		System.out.println("==============================================================");
		System.out.println("20 > 10 = "+(20>10));
		System.out.println("!(20 > 10) = "+!(20>10));
		System.out.println("==============================================================");
		int a2=10, a3=10;
		System.out.println("a2 = "+a2+", a3 = "+a3);
	
		//++a2;//a2=a2+1;
		//--a3;//a3=a3-1;
		
		//++ 연산자와 -- 연산자는 피연산자 뒤에 위치하여 작성 가능
		// => ++ 연산자와 -- 연산자를 사용한 단일 명령인 경우 연산자의 위치는 연산결과에 미영향
		a2++;
		a3--;

		System.out.println("a2 = "+a2+", a3 = "+a3);
		System.out.println("==============================================================");
		int a4=10, a5=10;
		
		//++ 연산자와 -- 연산자를 사용한 단일 명령이 아닌 경우 연산자의 위치는 연산결과에 영향
		int b1=++a4;//전처리 : ++a4 명령을 실행하고 결과값을 b1 변수에 저장 
		int b2=a5++;//후처리 : a5 변수값을 b2 변수에 저장하고 b5++ 명령 실행
		
		System.out.println("a4 = "+a4+", a5 = "+a5);
		System.out.println("b1 = "+b1+", b2 = "+b2);
		System.out.println("==============================================================");
		//이항 연산자 : 피연산자의 갯수가 2개인 연산자
		// => 산술 연산자, 이동 연산자, 비교 연산자, 논리 연산자, 대입 연산자

		//산술 연산자 : *(곱), /(나눔), %(나머지), +(합 또는 문자열 결합), -(차)
		int c1=20, c2=10;
		System.out.println(c1+" * "+c2+" = "+(c1*c2));
		System.out.println(c1+" / "+c2+" = "+(c1/c2));
		System.out.println(c1+" % "+c2+" = "+(c1%c2));
		System.out.println(c1+" + "+c2+" = "+(c1+c2));
		System.out.println(c1+" - "+c2+" = "+(c1-c2));
		System.out.println("==============================================================");
		//이동 연산자 : 정수값을 원하는 방향으로 Bit 수만큼 이동하는 연산자
		// => <<(왼쪽 이동 연산자), >>(오른쪽 이동 연산자), >>>(오른쪽 이동 연산자)
		//50(10) : 4Byte(32Bit) - 00000000000000000000000000110010
		//50 << 3 : 00000000000000000000000110010000 - 400(10)
		//50 >> 3 : 00000000000000000000000000000110 - 6(10) 
		//-50(10) : 4Byte(32Bit) - 11111111111111111111111111001110
		//-50 >> 3 : 11111111111111111111111111111001
		//-50 >>> 3 : 00011111111111111111111111111001
		
		//비교(관계) 연산자 : 값을 비교하여 논리값을 제공하는 연산자
		// => >, <, >=, <=, ==, !=, instanceof : 객체 구분 연산자
		System.out.println("20 > 10 = "+(20>10));
		System.out.println("20 < 10 = "+(20<10));
		System.out.println("20 == 10 = "+(20==10));
		System.out.println("20 != 10 = "+(20!=10));
		System.out.println("==============================================================");
		//논리 연산자 : Bit 논리 연산자, 일반 논리 연산자
		// => Bit 논리 연산자 : 두 피연산자(정수값)를 Bit 단위로 계산하기 위한 연산자 
		//- &(논리곱), ^(배타적 논리합), |(논리합)
		// => 일반 논리 연산자 : 비교 연산자를 연결하여 처리하기 위한 연산자 - &&(And 연산자), ||(Or 연산자)
		//int d=20;
		int d=-20;
		System.out.println("d = "+d) ;
		
		//변수값이 작은값~큰값 범위의 값을 확인하기 위한 연산식 - 변수값>=작은값 && 변수값<=큰값
		//&& 연산자는 첫번째 비교식이 거짓인 경우 && 연산자 뒤의 비교식 미실행
		System.out.println("d >= 10 && d <= 30 = "+(d >= 10 && d <= 30));
		//|| 연산자는 첫번째 비교식이 참인 경우 || 연산자 뒤의 비교식 미실행
		System.out.println("d < 10 || d > 30 = "+(d < 10 || d > 30));
		System.out.println("==============================================================");
		//삼항 연산자 : 피연산자의 갯수가 3개인 연산자
		//형식) 조건식 ? 참값 : 거짓값
		// => 조건식 : 논리값(false 또는 true)을 제공하는 연산자
		// => 조건식의 결과값이 [true]인 경우 참값을 제공하고 [false]인 경우 거짓값 제공
		//int e1=20, e2=10;
		int e1=10, e2=20;
		
		System.out.println("큰 값 = "+(e1 > e2 ? e1 : e2));
		System.out.println("==============================================================");
		//int e3=10;
		int e3=11;
		
		//[X % Y == 0]의 결과값이 [true]인 경우 X는 Y의 배수로 표현 - 배수 연산식
		System.out.println(e3+" = "+(e3 % 2 == 0 ? "짝수" : "홀수"));
		System.out.println("==============================================================");
		//대입 연산자 : 왼쪽 피연산자(변수)에 값을 저장하기 위한 연산자
		// => 무조건 마지맛에 실행되는 연산자
		// => 순수 대입 연산자(=) : 변수에 값을 저장하는 연산자
		// => 계산 대입 연산자(*=, /=, %=, +=, -=, <<=. <<=, >>>=, &=, ^=, |=) : 계산 처리
		//결과값을 변수에 저장
		int e4=10;
		System.out.println("e4 = "+e4);
		
		e4+=20;//e4=e4+20;
		System.out.println("e4 = "+e4);
		System.out.println("==============================================================");
		int f1, f2, f3 = 10;
		
		//일반적인 연산식은 왼쪽에서 오른쪽 방향으로 해석되어 실행되지만 단항 연산자 및
		//대입 연산자를 사용한 연산식은 오른쪽 방향에서 왼쪽 방향으로 해석되어 실행
		//ex) A + B + C             A = B = C
		//    ────→           ←────
		f1=f2=f3;
		System.out.println("f1 = "+f1+", "+"f2 = "+f2+", "+"f3 = "+f3);
		System.out.println("==============================================================");
	}
}