<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 핵심관심모듈의 클래스(DAO 클래스 및 Service 클래스)를 Spring Bean으로 등록 - 의존성 주입 -->
	<bean class="xyz.itwill06.aop.HewonDAOImpl" id="hewonDAO"/>
	<bean class="xyz.itwill06.aop.HewonServiceImpl" id="hewonService">
		<property name="hewonDAO" ref="hewonDAO"/>
	</bean>
	
	<!-- 횡단관심모듈의 클래스(Advice 클래스)를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill06.aop.HewonAdvice" id="hewonAdvice"/>
	
	<!-- Spring AOP(Aspect Oriented Programming - 관점 지향 프로그램) : AspectJ 컴파일러에
	의해 프로그램 실행시 핵심관심코드와 횡단관심코드가 결합(Weaving)되어 실행되는 기능 제공 -->
	<!-- => Spring AOP 기능을 사용하기 위해서는 aspectjrt 라이브러리와 aspectjweaver 라이브러라가
	프로젝트에 빌드 처리 - 메이블 : pom.xml -->
	<!-- => Spring AOP 기능을 구현하기 위해 Spring Bean Configuration File(XML) 파일의 엘리먼트를
	사용하거나 AOP 관련 어노테이션을 사용해 환경 설정 -->
	
	<!-- Spring Bean Configuration File(XML)에서 Spring AOP 기능을 구현하기 위한 엘리먼트를 
	사용하기 위해 aop 네임스페이스를 추가해 spring-aop.xsd 파일을 제공받도록 설정 -->
	<!-- config : Spring AOP 기능을 구현하기 위한 정보를 제공하기 위한 엘리먼트 -->
	<!-- => 하위 엘리먼트 : advisor 엘리먼트, aspect 엘리먼트, pointcut 엘리먼트 -->
	<aop:config>
		<!-- aspect : 핵심관심코드에 횡단관심코드를 원하는 위치에 삽입하여 실행되도록 설정하기 위한 엘리먼트 -->
		<!-- => 횡단관심코드가 삽입될 위치(JoinPoint)를 하위 엘리먼트로 설정 -->
		<!-- => 하위 엘리먼트 : before 엘리먼트, after-returning 엘리먼트, after-throwing 엘리먼트
		, after 엘리먼트, around 엘리먼트 -->
		<!-- ref 속성 : 횡단관심모듈(Advice 클래스)의 식별자(beanName)을 속성값으로 설정 -->
		<!-- => 횡단관심코드의 메소드를 호출하기 위한 객체를 제공받아 사용 -->
		<aop:aspect ref="hewonAdvice">
			<!-- before : 타겟 메소드의 명령(핵심관심코드) 실행 전 횡단관심코드를 삽입해
			실행되도록 설정하기 위한 엘리먼트 -->
			<!-- method 속성 : 횡단관심모듈(Advice 클래스)의 메소드명을 속성값으로 설정 -->
			<!-- pointcut 속성 : 핵심관심모듈로 등록된 Spring Bean의 메소드 중 횡단관심코드가
			삽입될 타겟메소드를 지정하기 위한 Pointcut 표현식을 속성값으로 설정 -->
			<!-- Pointcut 표현식 : Pointcut 언어를 사용해 클래스에 작성된 메소드 중 타겟메소드를
			지정하기 위한 표현방법 -->
			<!-- => Pointcut 표현식 : execution 제한자, within 제한자, bean 제한자에 패턴문자를 
			사용해 타겟메소드를 지정되도록 설정 - 제한자에 연산자를 사용해 타겟메소드 설정 가능  -->
			<!-- Pointcut 표현식의 패턴문자 : ..(0개 이상), *(1개 이상), ?(0개 또는 1개) -->
			<!-- Pointcut 언어의 연산자 : !(Not), &&(And), ||(Or)  -->

			<!-- execution 제한자를 사용해 타겟 메소드를 지정하는 방법 -->
			<!-- => execution 제한자는 메소드의 머릿부를 사용해 타겟메소드 지정 -->
			<!-- 형식) execution([접근제한자] 반환형 [패키지명.클래스명.]메소드명(자료형,자료형,...)) -->
			<!-- => [패키지.클래스]를 생략하면 Spring Bean으로 등록된 클래스(핵심관심모듈)의 
			메소드를 대상으로 타겟메소드 지정 -->
			<!-- => 클래스 대신 인터페이스를 사용하면 인터페이스를 상속받은 모든 자식클래스의 
			메소드를 대상으로 타겟메소드 지정 -->
			<!-- 반환형 또는 매개변수의 자료형이 클래스(인터페이스)인 경우 패키지를 포함하여 표현 -->			
			<!-- <aop:before method="beforeLog" pointcut="execution(void addHewon(xyz.itwill06.aop.Hewon))"/> -->
			<!-- Spring Bean으로 등록된 모든 클래스의 메소드를 타겟메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(..))"/> -->
			<!-- Spring Bean으로 등록된 모든 클래스에서 매개변수가 1개 이상 작성된 메소드를 타겟메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(*))"/> -->
			<!-- Spring Bean으로 등록된 클래스 중 특정 패키지(하위 패키지 미포함)에 작성된 
			클래스의 메소드를 대상으로 타겟메소드 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill06.aop.*(..))"/> -->
			<!-- Spring Bean으로 등록된 클래스 중 특정 패키지(하위 패키지 포함)에 작성된 
			클래스의 메소드를 대상으로 타겟메소드 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill06.aop..*(..))"/> -->
			<!-- Spring Bean으로 등록된 클래스 중 특정 클래스의 메소드를 대상으로 타겟메소드 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill06.aop.HewonDAOImpl.*(..))"/> -->
			<!-- Spring Bean으로 등록된 클래스 중 인터페이스를 상속받은 자식클래스의 메소드를 대상으로 타겟메소드 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill06.aop.HewonDAO.*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill06.aop.Hewon*.*(..))"/>  -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* get*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="!execution(* get*(..))"/> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(int)) or execution(int *(..))"/> -->
			
			<!-- within 제한자를 사용해 타겟 메소드를 지정하는 방법 -->
			<!-- => Spring Bean으로 등록된 클래스의 모든 메소드를 타겟메소드 지정 -->
			<!-- 형식) within(패키지명.클래스명) -->
			<!-- => within 제한자에 패턴문자를 사용할 수 있지만 클래스 대신 인터페이스 사용 불가능 -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill06.aop.HewonDAOImpl)"/> --> 
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill06.aop.*)"/>  -->
			
			<!-- bean 제한자를 사용해 타겟 메소드를 지정하는 방법 -->
			<!-- => Spring Bean으로 등록된 클래스의 모든 메소드를 타겟메소드 지정 -->
			<!-- => within 제한자는 클래스명으로 타겟메소드를 지정하지만 bean 제한자는 클래스의
			식별자(beanName)를 사용해 타겟메소드 지정 -->
			<!-- 형식) bean(beanName) -->
			<!-- <aop:before method="beforeLog" pointcut="bean(hewonDAO)"/> --> 
			<!-- <aop:before method="beforeLog" pointcut="bean(hewonService*)"/> -->
			
			<!-- pointcut : Spring Bean으로 등록된 클래스(핵심관심모듈)의 메소드 중 횡단관심코드가
			삽입될 타겟메소드 정보를 설정하기 위한 엘리먼트 -->
			<!-- => 자주 사용되는 Pointcut 표현식을 저장하여 aspect 엘리먼트의 하위 엘리먼트에게
			제공하기 위해 사용 -->
			<!-- => aspect 엘리먼트 내부(지역)에서 작성하거나 외부(전역)에서 작성 가능 -->
			<!-- expression 속성 : 타겟메소드를 지정하기 위한 제한자를 속성값으로 설정 -->
			<!-- id 속성 : pointcut 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
			<aop:pointcut expression="execution(* xyz.itwill06.aop.HewonDAO.*(..))" id="HewonDAOPointcut"/>			
			<aop:pointcut expression="execution(* xyz.itwill06.aop.HewonService.*(..))" id="HewonServicePointcut"/>
			
			<!-- pointcut-ref 속성 : pointcut 엘리먼트의 식별자(id 속성값)를 속성값으로 설정 -->
			<!-- => pointcut 엘리먼트로 제공된 정보를 사용해 타겟메소드 지정 -->
			<!-- <aop:before method="beforeLog" pointcut-ref="HewonDAOPointcut"/> -->
			<aop:before method="beforeLog" pointcut-ref="HewonServicePointcut"/>
				
			<!-- after-returning : 타겟 메소드의 명령(핵심관심코드)이 예외 없이 정상적으로 실행된
			후에 횡단관심코드를 삽입해 실행되도록 설정하기 위한 엘리먼트 -->	
			<aop:after-returning method="afterReturningLog" pointcut-ref="HewonServicePointcut"/>
			
			<!-- after-throwing : 타겟 메소드의 명령(핵심관심코드) 실행시 예외가 발생된 후에 
			횡단관심코드를 삽입해 실행되도록 설정하기 위한 엘리먼트 -->	
			<aop:after-throwing method="afterThrowingLog" pointcut-ref="HewonServicePointcut"/>
	
			<!-- after : 타겟 메소드의 명령(핵심관심코드)이 실행된 후 무조건 횡단관심코드를 
			삽입해 실행되도록 설정하기 위한 엘리먼트 -->	
			<aop:after method="afterLog" pointcut-ref="HewonServicePointcut"/>			
			
			<!-- around : 타겟 메소드의 명령(핵심관심코드) 실행 전과 후에 횡단관심코드를 삽입해
			실행되도록 설정하기 위한 엘리먼트 -->
			<aop:around method="aroundLog" pointcut-ref="HewonServicePointcut"/>			
		</aop:aspect>
	</aop:config>
</beans>